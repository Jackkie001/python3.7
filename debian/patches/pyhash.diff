From: Matthias Klose <doko@debian.org>
Date: Fri, 9 Feb 2018 14:24:32 -0800
Subject: pyhash

===================================================================
---
 Python/pyhash.c | 22 ++++++++++++++--------
 1 file changed, 14 insertions(+), 8 deletions(-)

diff --git a/Python/pyhash.c b/Python/pyhash.c
index a0850d0..202dc6b 100644
--- a/Python/pyhash.c
+++ b/Python/pyhash.c
@@ -327,13 +327,14 @@ static PyHash_FuncDef PyHash_Func = {fnv, "fnv", 8 * SIZEOF_PY_HASH_T,
  * the hash values' least significant bits.
  */
 #if PY_LITTLE_ENDIAN
-#  define _le64toh(x) ((uint64_t)(x))
+#  define _le64toh(v, x) memcpy(&(v), &(x), sizeof(v))
 #elif defined(__APPLE__)
-#  define _le64toh(x) OSSwapLittleToHostInt64(x)
+#  define _le64toh(v, x) v = OSSwapLittleToHostInt64(x)
 #elif defined(HAVE_LETOH64)
-#  define _le64toh(x) le64toh(x)
+#  define _le64toh(v, x) v = le64toh(x)
 #else
-#  define _le64toh(x) (((uint64_t)(x) << 56) | \
+#  define _le64toh(v, x) v = \
+                      (((uint64_t)(x) << 56) |			      \
                       (((uint64_t)(x) << 40) & 0xff000000000000ULL) | \
                       (((uint64_t)(x) << 24) & 0xff0000000000ULL) | \
                       (((uint64_t)(x) << 8)  & 0xff00000000ULL) | \
@@ -373,12 +374,13 @@ siphash24(uint64_t k0, uint64_t k1, const void *src, Py_ssize_t src_sz) {
     uint64_t v2 = k0 ^ 0x6c7967656e657261ULL;
     uint64_t v3 = k1 ^ 0x7465646279746573ULL;
 
-    uint64_t t;
+    uint64_t t, t2;
     uint8_t *pt;
     uint8_t *m;
 
     while (src_sz >= 8) {
-        uint64_t mi = _le64toh(*in);
+        uint64_t mi;
+        _le64toh(mi, *in);
         in += 1;
         src_sz -= 8;
         v3 ^= mi;
@@ -398,7 +400,8 @@ siphash24(uint64_t k0, uint64_t k1, const void *src, Py_ssize_t src_sz) {
         case 2: pt[1] = m[1]; /* fall through */
         case 1: pt[0] = m[0]; /* fall through */
     }
-    b |= _le64toh(t);
+    _le64toh(t2, t);
+    b |= t2;
 
     v3 ^= b;
     DOUBLE_ROUND(v0,v1,v2,v3);
@@ -414,8 +417,11 @@ siphash24(uint64_t k0, uint64_t k1, const void *src, Py_ssize_t src_sz) {
 
 static Py_hash_t
 pysiphash(const void *src, Py_ssize_t src_sz) {
+    uint64_t k0, k1;
+    _le64toh(k0, _Py_HashSecret.siphash.k0);
+    _le64toh(k1, _Py_HashSecret.siphash.k1);
     return (Py_hash_t)siphash24(
-        _le64toh(_Py_HashSecret.siphash.k0), _le64toh(_Py_HashSecret.siphash.k1),
+        k0, k1,
         src, src_sz);
 }
 
